//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/ParrotCargo/Scripts/MVP/Services/InputSystem/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""ParrotBlock"",
            ""id"": ""7f25a749-746c-4668-8add-c8538a9bf809"",
            ""actions"": [
                {
                    ""name"": ""Press"",
                    ""type"": ""Button"",
                    ""id"": ""5a09cea1-45f9-443c-8f9c-3ced938ee62c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""01bba3f2-b610-4c7f-86bd-e5b6066b0721"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""bf7abce3-d1de-41f0-8689-25a00395fcbf"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PK"",
                    ""action"": ""Press"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7553762b-755f-4256-bc3e-86ae9bc06a8f"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mobile"",
                    ""action"": ""Press"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""93be24a8-46a6-41e1-9907-3e4c926044bb"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PK"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a035cf8d-ace9-4e3d-a916-83d06889f2aa"",
                    ""path"": ""<Touchscreen>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mobile"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""PK"",
            ""bindingGroup"": ""PK"",
            ""devices"": [
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Mobile"",
            ""bindingGroup"": ""Mobile"",
            ""devices"": [
                {
                    ""devicePath"": ""<Touchscreen>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // ParrotBlock
        m_ParrotBlock = asset.FindActionMap("ParrotBlock", throwIfNotFound: true);
        m_ParrotBlock_Press = m_ParrotBlock.FindAction("Press", throwIfNotFound: true);
        m_ParrotBlock_Move = m_ParrotBlock.FindAction("Move", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // ParrotBlock
    private readonly InputActionMap m_ParrotBlock;
    private List<IParrotBlockActions> m_ParrotBlockActionsCallbackInterfaces = new List<IParrotBlockActions>();
    private readonly InputAction m_ParrotBlock_Press;
    private readonly InputAction m_ParrotBlock_Move;
    public struct ParrotBlockActions
    {
        private @PlayerInput m_Wrapper;
        public ParrotBlockActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Press => m_Wrapper.m_ParrotBlock_Press;
        public InputAction @Move => m_Wrapper.m_ParrotBlock_Move;
        public InputActionMap Get() { return m_Wrapper.m_ParrotBlock; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ParrotBlockActions set) { return set.Get(); }
        public void AddCallbacks(IParrotBlockActions instance)
        {
            if (instance == null || m_Wrapper.m_ParrotBlockActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ParrotBlockActionsCallbackInterfaces.Add(instance);
            @Press.started += instance.OnPress;
            @Press.performed += instance.OnPress;
            @Press.canceled += instance.OnPress;
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
        }

        private void UnregisterCallbacks(IParrotBlockActions instance)
        {
            @Press.started -= instance.OnPress;
            @Press.performed -= instance.OnPress;
            @Press.canceled -= instance.OnPress;
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
        }

        public void RemoveCallbacks(IParrotBlockActions instance)
        {
            if (m_Wrapper.m_ParrotBlockActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IParrotBlockActions instance)
        {
            foreach (var item in m_Wrapper.m_ParrotBlockActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ParrotBlockActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ParrotBlockActions @ParrotBlock => new ParrotBlockActions(this);
    private int m_PKSchemeIndex = -1;
    public InputControlScheme PKScheme
    {
        get
        {
            if (m_PKSchemeIndex == -1) m_PKSchemeIndex = asset.FindControlSchemeIndex("PK");
            return asset.controlSchemes[m_PKSchemeIndex];
        }
    }
    private int m_MobileSchemeIndex = -1;
    public InputControlScheme MobileScheme
    {
        get
        {
            if (m_MobileSchemeIndex == -1) m_MobileSchemeIndex = asset.FindControlSchemeIndex("Mobile");
            return asset.controlSchemes[m_MobileSchemeIndex];
        }
    }
    public interface IParrotBlockActions
    {
        void OnPress(InputAction.CallbackContext context);
        void OnMove(InputAction.CallbackContext context);
    }
}
